package controller;

import java.text.SimpleDateFormat;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;

import clients.ClentImpl;
import javafx.application.Platform;
import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.fxml.FXML;
import javafx.scene.control.Label;
import javafx.scene.control.ProgressBar;
import javafx.scene.control.TextField;
import main.MainApp;

public class MainAppController {

	private MainApp mainApp;

	@FXML private TextField client;
	@FXML private TextField task;
	@FXML private TextField work;
	@FXML private Label ctime;
	@FXML private Label sum;
	@FXML private ProgressBar progressBar;
	
	@FXML
	public void calculateHandler() {
		int cNum= Integer.parseInt(client.getText());
		int tNum= Integer.parseInt(task.getText());
		int wNum= Integer.parseInt(work.getText());
	
		ExecutorService pool=null;
		try {  
	            double sumPrice=0;
	            long totalConsume=0;
				pool = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
				
				for (int i = 0; i < cNum; i++) {
					ClentImpl c= new ClentImpl(wNum,tNum);
					pool.execute(c);
					sumPrice+=(double)c.reponse();
					totalConsume+= c.getConsume();
					sum.setText("$"+sumPrice+"");
					ctime.setText((totalConsume/1000)+" sec");
				}
				progressBar.progressProperty().addListener(new ChangeListener() {

					@Override
					public void changed(ObservableValue arg0, Object arg1, Object arg2) {
						// TODO Auto-generated method stub
						
					}
				});
				

		} finally {
			pool.shutdown();
		}
		 
	}

	public void setMainApp(MainApp mainApp) {
		// TODO Auto-generated method stub
		this.mainApp=mainApp;
	    Platform.runLater(() -> mainApp.getView().requestFocus());
	}

}
