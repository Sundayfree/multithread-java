package clients;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.xml.stream.events.EndDocument;

import masters.Master;
import tasks.ITask;
import tasks.OrderTask;
import tasks.TaskResult;
import workers.OrderWorker;

public class OrderClient implements IClient {

	private Master master;
	private long start;
	private long end;
	private long consume;
	
	public long getStart() {
		return start;
	}

	public long getEnd() {
		return end;
	}
„ÄÅ
	public long getConsume() {
		return consume;
	}
	
	public OrderClient(Integer workNum, int taskNum) {
		super();
		this.master =  new Master (new OrderWorker (), workNum);
		for (int i = 1; i <= taskNum; i++) {
            ITask t = new OrderTask();
            ((OrderTask) t).setId (i);
            ((OrderTask) t).setPrice (new Random ().nextInt (1000));
            master.submitTask(t);
        }
	}
	@Override
	public void request() {
        master.execute ();
        int i =0;
        double sum =(double) reponse();
        System.out.println("=====>>>Order Client "+Thread.currentThread().getName()+"   Total order price: "+ sum);
        
	}
	public OrderClient() {
		super();
		// TODO Auto-generated constructor stub
	}
	@Override
	public Object reponse() {
		double sum= 0;
		start =System.currentTimeMillis();
	    while(true){
				if(master.isCompleted()){
					
					CopyOnWriteArrayList<TaskResult> response = master.getResult();
					for (TaskResult workerResult : response) {
						OrderTask order = (OrderTask) workerResult.getResult();
						sum+= order.getPrice();
					};
					
					break;
				}
			}
		return sum;
		
	}

	@Override
	public void run() {
	
		request();
	}

}
