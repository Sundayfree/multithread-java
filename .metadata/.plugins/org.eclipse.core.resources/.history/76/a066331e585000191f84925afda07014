package workers;


import tasks.ITask;
import tasks.ProductTask;
import tasks.TaskResult;

import java.util.Random;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;


public class ProductWorker extends Worker {
    @Override
    public  TaskResult taskHandler(ITask input) {
        ProductTask product = (ProductTask) input;
        TaskResult result= null;
        try {
            this.setId (new Random().nextInt(1000));
            this.setName ("jim"+ new Random ().nextInt (100));
            this.setDept ("Product Department");
        
            System.out.println ("product worker:  "+Thread.currentThread ().getName()+"  Product"+this.toString() + " is doing "+product.toString());
            TimeUnit.SECONDS.sleep(1);
            //TODO
            result  =new TaskResult(product.getId (),product);
            if(!Thread.currentThread().isAlive()) {
            	System.out.println("222222222222222222222222");
            }
        } catch (InterruptedException e) {
            e.printStackTrace ();
        }
        return result;
    }

	
}
