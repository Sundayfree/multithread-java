package clients;

import java.util.Random;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

import masters.Master;
import tasks.ITask;
import tasks.OrderTask;
import tasks.TaskResult;
import workers.OrderWorker;

public class OrderClient implements IClient {

	private Master master;
	public OrderClient(Integer num) {
		super();
		this.master =  new Master (new OrderWorker (), num);
	}
	@Override
	public void request(int num) {
        for (int i = 1; i <= num; i++) {
            ITask t = new OrderTask ();
            ((OrderTask) t).setId (i);

            ((OrderTask) t).setPrice (new Random ().nextInt (1000));
            master.submitTask (t);
        }
        master.execute ();
        int i =0;
        double sum =(double) reponse();
        System.out.println("=====>>>Order Client "+Thread.currentThread().getName()+"   Total order price: "+ sum);
        
	}
	@Override
	public Object reponse() {
		double sum= 0;
	    while(true){
				if(master.isCompleted()){
					
					CopyOnWriteArrayList<TaskResult> response = master.getResult();
					for (TaskResult workerResult : response) {
						OrderTask order = (OrderTask) workerResult.getResult();
						sum+= order.getPrice();
					};
					
					break;
				}
			}
		return sum;
		
	}

	@Override
	public void run() {
	
		request();
	}

}
